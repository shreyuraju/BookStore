#https://www.youtube.com/watch?v=-42K44A1oMA

backend->npm run dev
frontend-> npm run dev

create folder bookstore-> open folder in VS code
create 2 new folder nameing backend | frontend

open terminal goto backend folder by "cd backend"
npm init -y -> package.json file will be created 
inside package.json add `"type": "module"` this line under `description`

add 2 another module `express.js and nodemon` by `npm i express nodemon`

add `"start": "node index.js", | "dev": "nodemon index.js"` line under scripts by removing existing line called "tests"

create `index.js | config.js` inside backend folder

inside config export PORT variable with value

inside index.js -> type

        import express from "express";
        import {PORT} from "./config.js";

        const app = express();

        app.listen(PORT, ()=>{
            console.log(`App is listening to port: ${PORT}`);
        });

run to by `npm run dev`

check to PORT req and res status code in browser console in network section

now add route in index.js

        app.get('/', (request, response) => {
        console.log(request);
        return response.status(234).send('Welcome to MERN Stack');
        });

Add mongoDB and Moongoose

create DB in cloud MongoDB website 

add this line `export const dbURL = "mongodb+srv://root:root@bookstore.62fk0ry.mongodb.net/?retryWrites=true&w=majority&appName=bookstore";` inside config.js

we need mongoose library to use MongoDB `npm i mongoose` then import to index.js file

create book model with mongoose

create folder `models-> bookModels.js`
    `
        import mongoose from "mongoose";

        const bookSchema = mongoose.Schema(
            {
                title: {
                    type: String,
                    required: true,
                },
                author: {
                    type: String,
                    required: true,
                },
                publishYear: {
                    type: Number,
                    required: true,
                },
            },
            {
                timestamps: true,
            }
        );

        export const Book = mongoose.model('Book', bookSchema);
    `

saving book details

for this we need to install post man locally `https://web.postman.co/`   `http://localhost:5555/books/`

and create new HTTP request `body -> raw -> {
                                                "title" : "dssd",
                                                "author" : "Desd",
                                                "publishYear" : 2022
                                            } 
                                            ` 
                                            copy paste and get `op` as 
                                            `
                                            {
                                                "title": "dssd",
                                                "author": "Desd",
                                                "publishYear": 2022,
                                                "_id": "65dda08dd7e443cd884f0bee",
                                                "createdAt": "2024-02-27T08:42:53.135Z",
                                                "updatedAt": "2024-02-27T08:42:53.135Z",
                                                "__v": 0
                                            }
                                            `
                                        
Get book ID with mongoose

type it in `
                //Route to GET All Books from DB
                app.get('/books', async (request, response) => {
                    try {
                        const books = await Book.find({});
                        return response.status(200).json({
                            count: books.length,
                            data:books
                        });
                    } catch (error) {
                        console.log(error.message);
                        response.status(500).send({ message: error.message });
                    }
                });
            `

            and test in postman

            should return this op

            `
                {
                    "count": 1,
                    "data": [
                        {
                            "_id": "65dda08dd7e443cd884f0bee",
                            "title": "dssd",
                            "author": "Desd",
                            "publishYear": 2022,
                            "createdAt": "2024-02-27T08:42:53.135Z",
                            "updatedAt": "2024-02-27T08:42:53.135Z",
                            "__v": 0
                        }
                    ]
                }
            `
Get One Book by id with DB
type in this and test in postman webiste by GET method with folling URL `http://localhost:5555/books/id` with raw data input //cp id from DB op
`
    //Route to GET ONE Books from DB by id
    app.get('/books/:id', async (request, response) => {
        try {
            const {id} = request.params;
            const book = await Book.findById(id);
            return response.status(200).json(book);
        } catch (error) {
            console.log(error.message);
            response.status(500).send({ message: error.message });
        }
    });
`

Update book with DB

//Route to Update a Book

app.put('/books/:id', async (request, response) => {
    try {
        if (
            !request.body.title ||
            !request.body.author ||
            !request.body.publishYear
        ) {
            return response.status(400).send({
                message: 'Send all required fields: title, author, publishYear',
            });
        }

        const {id} = request.params;

        const result = await Book.findByIdAndUpdate(id, request.body);

        if(!result) return response.status(404).json({message:'Book Not Found'});

        return response.status(200).send({message: 'Book Updated Successfully'});

    } catch (error) {
        console.log(error.message);
        response.status(500).send({ message: error.message });
    }
});

type in this and test in postman webiste by PUT method with folling URL `http://localhost:5555/books/id` with raw data input //cp id from DB op

//Delete book with DB

`
    //Route Delete a book
    app.delete('/books/:id', async (request, response) => {
        try {
            const { id } = request.params;

            const result = await Book.findByIdAndDelete(id);

            if (!result) return response.status(404).json({ message: 'Book Not Found' });

            return response.status(200).send({ message: 'Book Delete Successfully' });
        } catch (error) {
            console.log(error.message);
            response.status(500).send({ message: error.message });
        }
    });
`
type in this and test in postman webiste by DEL method with folling URL `http://localhost:5555/books/id` with raw data input //cp id from DB op


creating middleware Route

cut the routes in index.js and create new folder routes->new file bookRoute.js and paste the route inside

`
import express from 'express';
import { Book } from '../models/bookModel.js';

const router = express.Router();
`

import express and book models, add router and rename `app` to `router` and export reouter as default `export default router;`
import booksroute & `app.use('/books', booksRoute);` add this in index.js

remove `books` for reduntant keep only `/`

and check the routes working in postman


CORS policy
Cross-Origin Resource Sharing

install `npm i cors` inside server

import cors from 'cors';

//option 1: Allow All Origins with Default of cors(*)

// app.use(cors());

//option 2: Allow Custom Origins
app.use(
    cors({
        origin: 'http://localhost:3000',
        methods: ['GET', 'POST', 'PUT', 'DELETE'],
        allowedHeaders: ['Content-Type'],
    })
);

keep option 2

NOW CRETE front end using vite `npm create vite@latest`
projectname-> select framework `react` -> select variant `javascript`

cd frontend -> npm i

install tailwindcss

https://tailwindcss.com/docs/guides/vite

npm install -D tailwindcss postcss autoprefixer

npx tailwindcss init -p

cp `"./index.html",
    "./src/**/*.{js,ts,jsx,tsx}", `
    inside tailwind.config.js

cp 
`@tailwind base;
@tailwind components;
@tailwind utilities;`

inside index.css by deleteing existing codes

delete `App.css`

SPA and ADD react router dom

`npm i react-router-dom`

inside `main.jsx` import `import { BrowserRouter } from 'react-router-dom';`
cp in app components
`<BrowserRouter>`


import `import { Routes,Route } from 'react-router-dom';` in `App.jsx`
`<Routes>
    <route path='' element={} />
    <route path='' element={} />
    <route path='' element={} />
    <route path='' element={} />
    <route path='' element={} />
</Routes>`

create new folder `pages`
create 5 file names
`create.jsx, delete.jsx, edit.jsx, show.jsx, home.jsx`
and and elements by `rafc` from `ES7+` extention

import 
`
import Home from './pages/Home';
import CreateBooks from './pages/CreateBooks';
import ShowBook from './pages/ShowBook';
import EditBook from './pages/EditBook';
import DeleteBook from './pages/DeleteBook';
`
inside `App.jsx`

and add path and element
`
<Routes>
      <route path='/' element={<Home/>} />
      <route path='/books/create' element={<CreateBooks/>} />
      <route path='/books/details/:id' element={<ShowBook/>} />
      <route path='/books/edit/:id' element={<EditBook/>} />
      <route path='/books/delete/:id' element={<DeleteBook/>} />
    </Routes>
`


show books

install `npm i axios react-icons` for icons

comment CORS custom origin in index.js at backend and run the server

create folder `components` inside src 
create file `spinner.jsx`
type below code inside
`
    import React from 'react'

    const Spinner = () => {
    return (
        <div className='animate-ping w-16 h-16 m-8 rounded-full bg-sky-600'></div>
    )
    }

    export default Spinner
`
now in `Home.jsx` import
`
    import axios from 'axios';
    import Spinner from '../components/Spinner';
    import {Link} from 'react-router-dom';
    import {AiOutlineEdit} from 'react-icons/ai';
    import {BsInfoCircle} from 'react-icons/bs';
    import {MdOutlineAddBox, MdOutlineDelete} from 'react-icons/md';
`

and create useStates
`
const [books, setBooks] = useState([]);
  const [loading, setLoading] = useState(false);
`

creaete useEffect from loading
`
    useEffect(() => {
        setLoading(true);
        axios
        .get('http://localhost:5555/books')
        .then((response) => {
            setBooks(response.data.data);
            setLoading(false);
        })
        .catch((error) => {
            console.log(error);
            setLoading(false);
        });
    }, []);
`

creat conditon for Loading
`
<div className='p-4'>
      <div className='flex justify-between items-center'>
        <h1 className='text-3xl my-8'>Book List</h1>
        <Link to='/books/create'>
          <MdOutlineAddBox className='text-sky-800 text-4xl' />
        </Link>
      </div>
      {loading ? (
        <Spinner />
      ) : (
        
      )}
    </div>
`
type-in table content

`
        <table className='w-full border-seperate border-spacing-2'>
          <thead>
            <tr>
              <th className='border border-slate-600 rounded-md'>No</th>
              <th className='border border-slate-600 rounded-md'>Title</th>
              <th className='border border-slate-600 rounded-md max-md:hidden'>author</th>
              <th className='border border-slate-600 rounded-md max-md:hidden'>Publish Year</th>
              <th className='border border-slate-600 rounded-md'>Operations</th>
            </tr>
          </thead>
          <tbody>
            {books.map((book, index) => (
              <tr key={book._id} className='h-8'>
                <td className='border border-slate-700 rounded-md text-center'>{index + 1}</td>
                <td className='border border-slate-700 rounded-md text-center'>{book.title}</td>
                <td className='border border-slate-700 rounded-md text-center max-md:hidden'>{book.author}</td>
                <td className='border border-slate-700 rounded-md text-center max-md:hidden'>{book.publishYear}</td>
                <td className='border border-slate-700 rounded-md text-center'>
                  <div className='flex justify-center gap-x-4'>
                    <Link to={`/books/details/${book._id}`}>
                      <BsInfoCircle className='text-2xl text-yellow-600' />
                    </Link>
                    <Link to={`/books/edit/${book._id}`}>
                      <AiOutlineEdit className='text-2xl text-yellow-600' />
                    </Link>
                    <Link to={`/books/delete/${book._id}`}>
                      <MdOutlineDelete className='text-2xl text-red-600' />
                    </Link>
                  </div>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
`

create backbutton.jsx in compoent folder to create back backbutton

`
import React from 'react'
import {Link} from 'react-router-dom';
import {BsArrowLeft} from 'react-icons/bs';

const BackButton = ({destination = '/'}) => {
  return (
    <div className='flex'>
      <Link to={destination} className='bg-sky-800 text-white px-4 py-1 rounded-lg w-fit'>
        <BsArrowLeft className='text-2xl' />
      </Link>
    </div>
  )
}

export default BackButton

`

Showing Book details

import necessary items

`
import React, { useEffect, useState } from 'react';
import axios from 'axios';
import { useParams } from 'react-router-dom';
import BackButton from '../components/BackButton';
import Spinner from '../components/Spinner';
`

create consts and add useEffect

`
const [book, setBook] = useState({});
  const [loading, setLoading] = useState(false);
  const { id } = useParams();

  useEffect(() => {
    setLoading(true);
    axios
      .get(`http://localhost:5555/books/${id}`)
      .then((response) => {
        setBook(response.data);
        setLoading(false);
      })
      .catch((error) => {
        console.log(error);
        setLoading(false);
      });
  }, [])
`

in return statement

`
    <div className='p-4'>
      <BackButton />
      <h1 className='text-3xl my-4'>Show Book</h1>
      {loading ? (
        <Spinner />
      ) : (
        <div className='flex flex-col border-2 border-sky-400 rounded-xl w-fit p-4'>
          <div className='my-4'>
            <span className='text-xl mr-4 text-gray-500'>Id:</span>
            <span>{book._id}</span>
          </div>
          <div className='my-4'>
            <span className='text-xl mr-4 text-gray-500'>Title:</span>
            <span>{book.title}</span>
          </div>
          <div className='my-4'>
            <span className='text-xl mr-4 text-gray-500'>Author:</span>
            <span>{book.author}</span>
          </div>
          <div className='my-4'>
            <span className='text-xl mr-4 text-gray-500'>Publish Year:</span>
            <span>{book.publishYear}</span>
          </div>
          <div className='my-4'>
            <span className='text-xl mr-4 text-gray-500'>Create Time:</span>
            <span>{new Date(book.createdAt).toString()}</span>
          </div>
          <div className='my-4'>
            <span className='text-xl mr-4 text-gray-500'>Last Update Time:</span>
            <span>{new Date(book.updatedAt).toString()}</span>
          </div>
        </div>
      )}
    </div>
`


create Book CreateBook.jsx

imports

`
import React, {useState} from 'react'
import BackButton from '../components/BackButton'
import Spinner from '../components/Spinner'
import axios from 'axios'
import { useNavigate } from 'react-router-dom'
`

constants and useStates

`
const [title, setTitle] = useState('')
const [author, setAuthor] = useState('')
const [publishYear, setPublishYear] = useState('')
const [loading, setLoading] = useState(false);
const navigate = useNavigate();
`

in .jsx

`
<div className='p-4'>
      <BackButton />
      <h1 className='text-3xl my-4'>Create Book</h1>
      {loading ? <Spinner /> : ''}
      <div className='flex flex-col border-2 border-sky-400 rounded-xl w-[600ps] p-4 mx-auto'>
        <div className='my-4'>
          <label className='text-xl mr-4 text-gray-500'>Title</label>
          <input type='text' value={title} onChange={(e) => setTitle(e.target.value)} className='border-2 border-gray-500 px-4 py-2 w-full' />
        </div>
        <div className='my-4'>
          <label className='text-xl mr-4 text-gray-500'>Author</label>
          <input type='text' value={author} onChange={(e) => setAuthor(e.target.value)} className='border-2 border-gray-500 px-4 py-2 w-full' />
        </div>
        <div className='my-4'>
          <label className='text-xl mr-4 text-gray-500'>PublishYear</label>
          <input type='text' value={publishYear} onChange={(e) => setPublishYear(e.target.value)} className='border-2 border-gray-500 px-4 py-2 w-full' />
        </div>
        <button className='p-2 bg-sky-300 m-8' onClick={handleSaveBook}>Save</button>
      </div>
    </div>
`

EditBook

same as create book
`
import React, { useState, useEffect } from 'react';
import BackButton from '../components/BackButton';
import Spinner from '../components/Spinner';
import axios from 'axios';
import { useNavigate, useParams } from 'react-router-dom';
`

`  const [title, setTitle] = useState('');
  const [author, setAuthor] = useState('');
  const [publishYear, setPublishYear] = useState('');
  const [loading, setLoading] = useState(false);
  const navigate = useNavigate();
  const { id } = useParams();
`

`
  useEffect(() => {
    setLoading(true);
    axios
      .get(`http://localhost:5555/books/${id}`)
      .then((response) => {
        setTitle(response.data.title);
        setAuthor(response.data.author);
        setPublishYear(response.data.publishYear);
        setLoading(false);
      })
      .catch((error) => {
        setLoading(false);
        alert("An error occured, please check the console");
        console.log(error);
      });
  }, []);
`

`
  const handleEditBook = () => {
    const data = {
      title,
      author,
      publishYear,
    }
    setLoading(true);
    axios
      .put(`http://localhost:5555/books/${id}`, data)
      .then(() => {
        setLoading(false);
        navigate('/');
      })
      .catch((error) => {
        setLoading(false);
        alert("An error occured, please check conole");
        console.log(error);
      });
  }
`

`
    <div className='p-4'>
      <BackButton />
      <h1 className='text-3xl my-4'>Edit Book</h1>
      {loading ? <Spinner /> : ''}
      <div className='flex flex-col border-2 border-sky-400 rounded-xl w-[600ps] p-4 mx-auto'>
        <div className='my-4'>
          <label className='text-xl mr-4 text-gray-500'>Title</label>
          <input type='text' value={title} onChange={(e) => setTitle(e.target.value)} className='border-2 border-gray-500 px-4 py-2 w-full' />
        </div>
        <div className='my-4'>
          <label className='text-xl mr-4 text-gray-500'>Author</label>
          <input type='text' value={author} onChange={(e) => setAuthor(e.target.value)} className='border-2 border-gray-500 px-4 py-2 w-full' />
        </div>
        <div className='my-4'>
          <label className='text-xl mr-4 text-gray-500'>PublishYear</label>
          <input type='number' value={publishYear} onChange={(e) => setPublishYear(e.target.value)} className='border-2 border-gray-500 px-4 py-2 w-full' />
        </div>
        <button className='p-2 bg-sky-300 m-8' onClick={handleEditBook}>Save</button>
      </div>
    </div>
`

DeleteBook
`
import React, { useState } from 'react';
import BackButton from '../components/BackButton';
import Spinner from '../components/Spinner';
import axios from 'axios';
import { useNavigate, useParams } from 'react-router-dom';
`

`
const [loading, setLoading] = useState(false);
  const navigate = useNavigate();
  const { id } = useParams();
  const handleDeleteBook = () => {
    setLoading(true);
    axios
      .delete(`http://localhost:5555/books/${id}`)
      .then(() => {
        setLoading(false);
        navigate('/');
      })
      .catch((error) => {
        setLoading(false);
        alert("An error occured, please check the console");
        console.log(error);
      });
  };
`

`
    <div className='p-4'>
      <BackButton />
      <h1 className='text-3xl my-4'>Delete Book</h1>
      {loading ? <Spinner/> : ""}
      <div className='flex flex-col items-center border-2 border-sky-400 rounded-xl w-[600px] p-8 mx-auto'>
        <h3 className='text-2xl'>Are you Sure YOu Want To Delete This BOOK</h3>
        <button className='p-4 bg-red-600 text-white m-8 w-full' onClick={handleDeleteBook}>
          Yes, Delete IT
        </button>
      </div>
    </div>
`

SHow Books List as Card

make folder `home` inside components folder
create 2 file `BookTable.jsx` & `BookCard.jsx`
cut the table content from Home.jsx
and add props as `{books}`

import required items to `BookTable`

import `BookTable & BookCard` to Home.jsx

import BooksTable from '../components/home/BooksTable';
import BooksCard from '../components/home/BooksCard';

add const line to showType

`  const [showType, setShowType] = useState('table');`

add showtypes to condition
`{loading ? <Spinner/>: (showType==='table' ? (<BooksTable books={books} />): (<BooksCard books={books}/>))}`

add 2 buttons to toggle in between

 `
 <div className='flex justify-center items-center gap-x-4'>
        <button
          className='bg-sky-300 hover:bg-sky-600 px-4 py-1 rounded-lg'
          onClick={() => setShowType('table')}>
          Table
        </button>
        <button
          className='bg-sky-300 hover:bg-sky-600 px-4 py-1 rounded-lg'
          onClick={() => setShowType('card')}>
          Card
        </button>
      </div>
 `

 in BookCard

 import
 `
 import { Link } from "react-router-dom";
import { PiBookOpenTextLight } from 'react-icons/pi';
import { BiUserCircle } from 'react-icons/bi';
import { AiOutlineEdit } from 'react-icons/ai';
import { BsInfoCircle } from 'react-icons/bs';
import { MdOutlineDelete } from 'react-icons/md';
 `

 return
 `
         <div className="grid sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4">
            {books.map(
                (book) => (
                    <div key={book._id} className="border-2 border-gray-500 rounded-lg px-4 py-2 m-4 relative hover:shad">
                        <h2 className="absolute top-1 right-2 px-4 py-1 bg-red-300 rounded-lg">{book.publishYear}</h2>
                        <h4 className="my-2 text-gray-500">{book._id}</h4>
                        <div className="flex justify-start items-center gap-x-2">
                            <PiBookOpenTextLight className='text-red-300 text-2xl' />
                            <h2 className="my-1">{book.title}</h2>
                        </div>
                        <div className="flex justify-start items-center gap-x-2">
                            <BiUserCircle className='text-red-300 text-2xl' />
                            <h2 className="my-1">{book.author}</h2>
                        </div>
                        <div className="flex justify-between items-center gap-x-2 mt-4 p-4">
                            <Link to={`/books/details/${book._id}`}>
                                <BsInfoCircle className='text-2xl text-green-800 hover:text-black' />
                            </Link>
                            <Link to={`/books/edit/${book._id}`}>
                                <AiOutlineEdit className='text-2xl text-yellow-600 hover:text-black' />
                            </Link>
                            <Link to={`/books/delete/${book._id}`}>
                                <MdOutlineDelete className='text-2xl text-red-600 hover:text-black' />
                            </Link>
                        </div>
                    </div>
                ))}
        </div>
 `


make BookCard in a single compoent

create `BookSingleCard.jsx` inside home folder

cut and paste imports from `BookCard.jsx`

`import { Link } from "react-router-dom";
import { PiBookOpenTextLight } from 'react-icons/pi';
import { BiUserCircle } from 'react-icons/bi';
import { AiOutlineEdit } from 'react-icons/ai';
import { BsInfoCircle } from 'react-icons/bs';
import { MdOutlineDelete } from 'react-icons/md';
`

import BookSingleCard
inside BookCard
`import BookSigleCard from "./BookSigleCard";`

cut and pate div block from mapping function and paste inside `BookSingleCard.jsx`
add props as `{book}`

inside BooksCard mapping function
`<BookSigleCard key={book._id} book={book}/>`


creating bookmodal
create `BookModal.jsx` inside home folder

imports
`
import { AiOutlineClose } from 'react-icons/ai';
import { PiBookOpenTextLight } from 'react-icons/pi';
import { BiUserCircle } from 'react-icons/bi';
`
returns
`
 <div
            className='fixed bg-black bg-opacity-60 top-0 left-0 right-0 bottom-0 z-50 flex justify-center items-center'
            onClick={onClose}>
            <div
                onClick={(event) => event.stopPropagation()}
                className='w-[600px] max-w-full h-[400px] bg-white rounded-xl p-4 flex flex-col relative'>
                <AiOutlineClose
                    className='absolute right-6 top-6 text-3xl text-red-600 cursor-pointer'
                    onClick={onClose} />
                <h2 className="w-fit px-4 py-1 bg-red-300 rounded-lg">{book.publishYear}</h2>
                <h4 className="my-2 text-gray-500">{book._id}</h4>
                <div className="flex justify-start items-center gap-x-2">
                    <PiBookOpenTextLight className='text-red-300 text-2xl' />
                    <h2 className="my-1">{book.title}</h2>
                </div>
                <div className="flex justify-start items-center gap-x-2">
                    <BiUserCircle className='text-red-300 text-2xl' />
                    <h2 className="my-1">{book.author}</h2>
                </div>
            </div>
        </div>
`

props `{book, onclose}`

in `BookSingleCard`

add imports

`import { useState } from "react";
import BookModal from "./BookModal";`

const `  const [showModal, setShowModal] = useState(false);`

inside Link division
`<BiShow
          className="text-3xl text-blue-800 hover:text-black cursor-pointer"
          onClick={() => setShowModal(true)} />`
before the last div
add this js line
`{ showModal && ( <BookModal book={book} onClose={()=>setShowModal(false)} /> ) }`

UIUX for alert

install ` npm i notistack`

in main.jsx we import snackbarprovider from notistack
`import { SnackBarProvider } from 'notistack';`

add
`    <SnackBarProvider>
      <App />
    </SnackBarProvider>`

import to create book
`import {useSnackbar} from 'notistack';`

const `  const {enqueueSnackbar} = useSnackbar();`

before navigateing to home 

`enqueueSnackbar('Book Created Successfully', {variant: 'success'});`

in catch comment alert and type
`enqueueSnackbar('Error', {variant: 'error'});`